import React, { useState } from 'react';
import styles from './loveCalculator.module.scss'
import classNames from 'classnames/bind';

const cx = classNames.bind(styles);

const LoveCalculator = () => {
  const [name1, setName1] = useState('');
  const [name2, setName2] = useState('');
  const [result, setResult] = useState('');
  const [encouragingMessage, setEncouragingMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [loadingText, setLoadingText] = useState('');

  const loadingMessages = ["L·ªçc ch·ªØ..", "G·ªôp ch·ªØ s·ªë...", "Vi·ªát Name v√¥ ƒë·ªãch...", "V√¨ tinh t√∫...", "Anh Ch√¢y ch√≠n b·∫£y...", "C√°ch ng·ªß 8 ti·∫øng trong 1 gi·ªù...", "H·ªôi suy th·∫≠n...", "Ni Ni Ni Ni gaaa... ", "ƒê√£ ho√†n t·∫•t"];

  // H√†m lo·∫°i b·ªè d·∫•u
  const removeAccents = (str) => {
    const normalizedStr = str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
    // Chuy·ªÉn c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ "ƒë" th√†nh "d"
    return normalizedStr.replace(/[ƒë]/g, "d");
  };

  const simulateLoading = (callback) => {
    let i = 0;
    const interval = setInterval(() => {
      if (i < loadingMessages.length) {
        setLoadingText(loadingMessages[i]);
        i++;
      } else {
        clearInterval(interval);
        callback();
      }
    }, 500);
  };

  // H√†m t√≠nh to√°n v√† l·∫•y th√¥ng ƒëi·ªáp kh√≠ch l·ªá
  const getEncouragingMessage = (percentage) => {
    if (percentage <= 20) {
      return "C√≥ l·∫Ω hai b·∫°n ch∆∞a th·ª±c s·ª± h√≤a h·ª£p l·∫Øm, nh∆∞ng ƒë·ª´ng bu·ªìn! H√£y th·ª≠ l·∫°i v·ªõi nh·ªØng c√°i t√™n kh√°c, bi·∫øt ƒë√¢u may m·∫Øn s·∫Ω m·ªâm c∆∞·ªùi!";
    } else if (percentage <= 40) {
      return "D√π hai b·∫°n c√≥ th·ªÉ c√≥ m·ªôt ch√∫t t∆∞∆°ng ƒë·ªìng, nh∆∞ng v·∫´n c√≤n kh√° nhi·ªÅu ƒëi·ªÅu c·∫ßn ph·∫£i thay ƒë·ªïi ƒë·ªÉ tr·ªü th√†nh m·ªôt c·∫∑p ƒë√¥i l√Ω t∆∞·ªüng. H√£y th·ª≠ tr√≤ chuy·ªán v√† kh√°m ph√° th√™m v·ªÅ nhau nh√©!";
    } else if (percentage <= 60) {
      return "B·∫°n v√† ƒë·ªëi ph∆∞∆°ng ƒëang ·ªü m·ªôt m·ª©c kh√° ·ªïn! Tuy nhi√™n, v·∫´n c√≤n c∆° h·ªôi ƒë·ªÉ t√¨m hi·ªÉu th√™m v·ªÅ nhau v√† n√¢ng cao s·ª± k·∫øt n·ªëi. H√£y th·ª≠ th√™m nh·ªØng ƒëi·ªÅu m·ªõi m·∫ª ƒë·ªÉ khi·∫øn t·ª∑ l·ªá n√†y cao h∆°n n·ªØa!";
    } else if (percentage <= 80) {
      return "Wow, hai b·∫°n th·∫≠t s·ª± r·∫•t h·ª£p nhau! C·∫£ hai c√≥ nhi·ªÅu ƒëi·ªÉm chung, v√† b·∫°n c√≥ th·ªÉ c√πng nhau x√¢y d·ª±ng m·ªôt m·ªëi quan h·ªá tuy·ªát v·ªùi. H√£y ti·∫øp t·ª•c kh√°m ph√° nh·ªØng ƒëi·ªÅu ƒë·∫∑c bi·ªát m√† hai b·∫°n mang l·∫°i cho nhau!";
    } else {
      return "Ch√∫c m·ª´ng b·∫°n v√† ng∆∞·ªùi ·∫•y, hai b·∫°n l√† m·ªôt c·∫∑p ƒë√¥i ho√†n h·∫£o! T·ª∑ l·ªá ph·∫ßn trƒÉm n√†y cho th·∫•y r·∫±ng hai b·∫°n th·ª±c s·ª± r·∫•t h√≤a h·ª£p. H√£y tr√¢n tr·ªçng nh·ªØng kho·∫£nh kh·∫Øc tuy·ªát v·ªùi b√™n nhau v√† t·∫°o d·ª±ng m·ªôt t∆∞∆°ng lai ƒë·∫ßy h·∫°nh ph√∫c nh√©!";
    }
  };

  const calculateLove = () => {
    if (!name1 || !name2) {
      alert("Vui l√≤ng nh·∫≠p c·∫£ hai t√™n!");
      return;
    }

    setIsLoading(true);
    setResult('');
    setEncouragingMessage('');

    simulateLoading(() => {
      // Lo·∫°i b·ªè d·∫•u v√† chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
      let lowerStr1 = name1.toLowerCase()
      let lowerStr2 = name2.toLowerCase()

      const normalizedName1 = removeAccents(lowerStr1)
      const normalizedName2 = removeAccents(lowerStr2)
      

      const combinedNames = normalizedName1 + normalizedName2;

      let letterCounts = {};

      // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói ch·ªØ c√°i
      for (let char of combinedNames) {
        if (/[a-z]/.test(char)) {
          letterCounts[char] = (letterCounts[char] || 0) + 1;
        }
      }
      

      // T·∫°o chu·ªói s·ªë t·ª´ s·ªë l·∫ßn xu·∫•t hi·ªán
      let numberString = '';
      for (let char in letterCounts) {
        numberString += letterCounts[char];
      }
      console.log(numberString);
      
      // T√≠nh to√°n t·ªâ l·ªá ph·∫ßn trƒÉm
      while (numberString.length > 2) {
        let newNumberString = '';
        let length = numberString.length;
        for (let i = 0; i < Math.floor(length / 2); i++) {
          newNumberString += (
            parseInt(numberString[i]) + parseInt(numberString[length - 1 - i])
          ).toString();
        }
        if (length % 2 !== 0) {
          newNumberString += numberString[Math.floor(length / 2)];
        }
        numberString = newNumberString;
      }

      const percentage = parseInt(numberString);
      setIsLoading(false);
      setResult(percentage + '%');
      setEncouragingMessage(getEncouragingMessage(percentage));
    });
  };

  return (
    <div className={cx("love-calculator")}>
      <h1>Love Calculator üíñ</h1>
      <div className={cx("input-container")}>
        <input
          type="text"
          placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
          value={name1}
          onChange={(e) => 
            {
                setName1(e.target.value)
                setResult('')
            }}
        />
        <input
          type="text"
          placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa ng∆∞·ªùi ·∫•y"
          value={name2}
          onChange={(e) => {
            setName2(e.target.value)
            setResult('')
          }}
        />
      </div>
      <button onClick={calculateLove} disabled={isLoading}>
        {isLoading ? 'ƒêang t√≠nh to√°n...' : 'T√≠nh to√°n'}
      </button>

      {isLoading && (
        <div className={cx("loading-container")}>
          <div className={cx("loading-spinner")}></div>
          <p>{loadingText}</p>
        </div>
      )}

      {result && !isLoading && (
        <div className={cx("result-container")}>
          <h2>K·∫øt qu·∫£: {result}</h2>
          <p>{encouragingMessage}</p>
        </div>
      )}
    </div>
  );
};

export default LoveCalculator;
